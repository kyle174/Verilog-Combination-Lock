// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2023 12:06:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          combolock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module combolock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Resetn;
reg change;
reg enter;
reg [3:0] password;
// wires                                               
wire changepulse;
wire correct;
wire enterpulse;
wire [0:6] leds;

// assign statements (if any)                          
combolock i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Resetn(Resetn),
	.change(change),
	.changepulse(changepulse),
	.correct(correct),
	.enter(enter),
	.enterpulse(enterpulse),
	.leds(leds),
	.password(password)
);
initial 
begin 
#200000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #5000 1'b1;
	#5000;
end 

// Resetn
initial
begin
	Resetn = 1'b1;
end 

// change
initial
begin
	change = 1'b1;
	change = #10000 1'b0;
	change = #10000 1'b1;
end 

// enter
initial
begin
	enter = 1'b1;
	enter = #30000 1'b0;
	enter = #10000 1'b1;
	enter = #30000 1'b0;
	enter = #10000 1'b1;
	enter = #30000 1'b0;
	enter = #10000 1'b1;
	enter = #30000 1'b0;
	enter = #10000 1'b1;
	enter = #30000 1'b0;
end 

// password[0]
initial
begin
	password[0] = 1'b0;
end 

// password[1]
initial
begin
	password[1] = 1'b0;
	password[1] = #10000 1'b1;
	password[1] = #80000 1'b0;
	password[1] = #10000 1'b1;
	password[1] = #40000 1'b0;
end 

// password[2]
initial
begin
	password[2] = 1'b0;
	password[2] = #10000 1'b1;
	password[2] = #80000 1'b0;
	password[2] = #10000 1'b1;
	password[2] = #40000 1'b0;
end 

// password[3]
initial
begin
	password[3] = 1'b0;
end 
endmodule

